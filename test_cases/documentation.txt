--------------------------------------------------------------------
-- LINK code Documentation --
--------------------------------------------------------------------

config {
	timeStep  : Int Unit -- size of the time step
	totalTime : Int Unit -- total amount of time 
	? -- constant variables
	run: ? 
	Backend : BackEndType
}
model id (id) {
	technique : TechniqueType
	boundaryField :?
	physics : physicsType
	? -- constant variables
	? -- math equations
	solve id with { SolvingTechniqueType, NumericalSchemeType}
	return id 
}


--------------------------------------------------------------------
-- BackendType in config  --
--------------------------------------------------------------------

----- BackendType ----- 
Su2 { format : FormatType 
      , time : Int -- sets a value for TimeDependent.INNER_ITER
      , plotting : PlottingType -- names of plot markers
     };

----- FormatType ----- 
Only supported by the following built-in keywords LIB_Format1 and LIB_Format2 which will generate the following for the test problem then the challenge problem:

LIB_Format1 ==> 
  InputOutput {
    MESH_FILENAME= mesh_solid_rod.su2,
    MESH_FORMAT= SU2,
    TABULAR_FORMAT= CSV,
    CONV_FILENAME= history,
    VOLUME_FILENAME= flow,
    SURFACE_FILENAME= surface_flow,
    OUTPUT_WRT_FREQ = 250,
    SCREEN_WRT_FREQ_TIME = 1
  }

LIB_FormatCP ==> 
  InputOutput {
    MESH_FILENAME= mesh_cht_3cyl.su2,
    MESH_FORMAT= SU2,
    OUTPUT_FILES= (PARAVIEW, SURFACE_PARAVIEW),
    CONV_FILENAME= history,
    VOLUME_FILENAME= flow,
    VOLUME_ADJ_FILENAME= adjoint,
    GRAD_OBJFUNC_FILENAME= of_grad.dat,
    VALUE_OBJFUNC_FILENAME= of_eval.dat,
    SURFACE_FILENAME= surface_flow,
    SURFACE_ADJ_FILENAME= surface_adjoint
  }


----- PlottingType ----- 

A list of strings separated by a comma and in parenthesis '(' and ')'.
Such as (a, b, c, d) will generate Su2 code 
   Plotting: {
     MARKER_PLOTTING= (a, b, c, d)
   }


--------------------------------------------------------------------
-- physicsType in Model --
--------------------------------------------------------------------
Only supported by the following built-in keyword LIB_PhysicsParameters1,LIB_PhysicsParametersCPFluid, and LIB_PhysicsParametersCPSolid  which will generate the following code


LIB_PhysicsParameters1 ==> 
  ProblemDefinition {
    SOLVER = HEAT_EQUATION,
    MATH_PROBLEM= DIRECT,
    RESTART_SOL= NO, --maybe make default NO, then we can skip this line
    OBJECTIVE_FUNCTION = TOTAL_HEATFLUX
    }
  ConductionDefinition {
    INC_NONDIM = DIMENSIONAL,
    SOLID_DENSITY = 19300i kg/m^3,
    SPECIFIC_HEAT_CP = 130 J/kg*K,
    SOLID_THERMAL_CONDUCTIVITY = 318 W/m*K
  }
  


LIB_PhysicsParameters_CPFluid ==> 
  thermalConductivity {
    CONDUCTIVITY_MODEL= CONSTANT_PRANDTL;
    PRANDTL_LAM= 0.72;
    PRANDTL_TURB= 0.90;
 }

  fluidModel {
    FLUID_MODEL= STANDARD_AIR;
    GAMMA_VALUE= 1.4; -- ratio of specific heats
    GAS_CONSTANT= 287.058 J/kg*K;
 }

  viscosityModel {
    VISCOSITY_MODEL= SUTHERLAND;
    MU_REF= 1.716E-5; -- Sutherland Viscosity Ref
    MU_T_REF= 273.15; -- Sutherland Temperature Ref
    SUTHERLAND_CONSTANT= 110.4; -- Sutherland Constant
 }


LIB_PhysicsParameters_CPSolid ==> 
  ConductionDefinition {
    INC_NONDIM = DIMENSIONAL;
    SOLID_TEMPERATURE_INIT= 300.0 K;
    SOLID_DENSITY = 8.67 g/cm^3;
    SPECIFIC_HEAT_CP = 426.4 J/(kg*K);
    SOLID_THERMAL_CONDUCTIVITY = 17.3 W/(m*K);
 }


--------------------------------------------------------------------
-- SolvingTechniqueType in Model --
--------------------------------------------------------------------
Only supported by the following built-in keyword LIB_SolvingTechnique1,LIB_SolvingTechnique_CP_Fluid which will generate 

LIB_SolvingTechnique1  => 
  LinearSolver {
    LINEAR_SOLVER= FGMRES,
    LINEAR_SOLVER_PREC= ILU,
    LINEAR_SOLVER_ERROR= 1E-15,
    LINEAR_SOLVER_ITER= 5
    }
 Convergence {
     CONV_RESIDUAL_MINVAL= -19,
     CONV_STARTITER= 10,
     CONV_CAUCHY_ELEMS= 100,
     CONV_CAUCHY_EPS= 1E-6
     }
   
LIB_SolvingTechnique_CPFluid =>
 ConvergenceParams {
  CONV_FIELD= RMS_DENSITY;
  CONV_RESIDUAL_MINVAL= -14;
  CONV_STARTITER= 10;
  CONV_CAUCHY_ELEMS= 100;
  CONV_CAUCHY_EPS= 1E-6; -- these values seem to be defaults
 } 

LIB_SolvingTechnique_CPSolid = LIB_SolvingTechnique1 

--------------------------------------------------------------------
-- NumericalSchemeType in Model --
--------------------------------------------------------------------
Only supported by the following built-in keyword LIB_NumericalScheme1 which will generate 

LIB_NumericalScheme1 =>
 NumericalSchemes {
   NUM_METHOD_GRAD = GREEN_GAUSS,
 }


LIB_NumericalScheme_CPSolid =>
 HeatNumericalMethod {
   TIME_DISCRE_HEAT= EULER_IMPLICIT
 }
 NumericalSchemes {
   NUM_METHOD_GRAD= GREEN_GAUSS;
   CFL_NUMBER= 10.0;
   CFL_ADAPT= NO;
   CFL_ADAPT_PARAM= ( 1.5, 0.5, 10.0, 10000.0 );
   RK_ALPHA_COEFF= ( 0.66667, 0.66667, 1.000000 ); -- these values seem to be defaults
 }

LIB_NumericalScheme_CPFluid =>
 NumericalSchemes {
   NUM_METHOD_GRAD= WEIGHTED_LEAST_SQUARES;
   CFL_NUMBER= 5.0;
   CFL_ADAPT= NO;
   CFL_ADAPT_PARAM= ( 0.1, 2.0, 5.0, 1e10 );
   RK_ALPHA_COEFF= ( 0.66667, 0.66667, 1.000000 ); -- these values seem to be defaults
 }

 FlowNumericalMethod {
   CONV_NUM_METHOD_FLOW= ROE;
   MUSCL_FLOW= YES;
   SLOPE_LIMITER_FLOW= NONE;
   JST_SENSOR_COEFF= ( 0.5, 0.02 );
   TIME_DISCRE_FLOW= EULER_IMPLICIT;
 }

 TurbulentNumericalMethod {
   CONV_NUM_METHOD_TURB= SCALAR_UPWIND;
   MUSCL_TURB= NO;
   SLOPE_LIMITER_TURB= VENKATAKRISHNAN;
   TIME_DISCRE_TURB= EULER_IMPLICIT;
 }

 SlopeLimiter {
   VENKAT_LIMITER_COEFF= 0.1;
   ADJ_SHARP_LIMITER_COEFF= 3.0;
   REF_SHARP_EDGES= 3.0;
   SENS_REMOVE_SHARP= NO;
 }

