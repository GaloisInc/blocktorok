import v2_LIB_conduction.steel as P;
import v2_LIB_fluid.steel as F
config {
  step : 1;
  totalTime : 2000 s;
  const Tw = P.InitialSolidTemperature;
  run: coupleModels1 (Tw);
  }

-------------------------------------------------------------------------------------------
-- Heat Transfer mandatory fields:
-- For fluid fields:
-- p: pressure [Pa]
-- p_rgh: pressure - hydrostatic contribution [Pa]
-- U: velocity [m/s]
-- T: temperature [K]
-- For solid fields:
-- T: temperature [K]

-- OpenFoam Notes:
-- U = velocity
-- d = length
-- nu = kinematic viscosity


SolvingTechnique pressureFluid {
    {
        solver : GAMG;
        tolerance : 1e-7;
        relTol : 0.01;
        smoother : DIC;
        maxIter : 100;
    }
}

SolvingTechnique restFluid {
    {
        solver : PBiCGStab;
        preconditioner : DILU;
        tolerance : 1e-6;
        relTol : 0.1;
    }
}

Algorithm PIMPLE { -- PIMPLE HERE IS A KEYWORD USED IN OPENFOAM!
    nNonOrthogonalCorrectors 0;
}

relaxationFactors -- not sure where to put this
{
    fields
    {
        rho : 1;
        p_rgh : 0.7;
    }

    equations
    {
        U : 0.3;
        "(h|e)" : 0.3;
        k : 0.3;
        epsilon : 0.3;
    }
}


NumericalScheme nFluid {
    ddt : steadyState;
    grad : Gauss Linear;
    grad(U) : cellLimited Gauss linear 1;
    div(phi,U) : bounded Gauss upwind;
    div(phi,h) : bounded Gauss upwind;
    div(phi,e) : bounded Gauss upwind;
    div(phi,K) : bounded Gauss upwind;
    div(phiv,p) : Gauss upwind;
    div(phi,k) : bounded Gauss upwind;
    div(phi,epsilon) : bounded Gauss upwind;
    div(((rho*nuEff)*dev2(T(grad(U))))) : Gauss linear;
    laplacian : Gauss linear limited corrected 0.33;
    interpolation : linear;
    snGrad : limited corrected 0.33;
}

SolvingTechnique eSolid {
    solver : GAMG;
    smoother : symGaussSeidel;
    tolerance : 1e-6;
    relTol : 0.1;
}

SolvingTechnique eFinalSolid {
    {
        $e;
        relTol : 0;
    }
}

NumericalScheme nSolid {
    ddt : Euler;
    grad : Gauss linear;
    div : none;
    laplacian(alpha,e) Gauss linear corrected;
    interpolation : linear;
    snGradSchemes : corrected;
}

-------------------------------------------------------------------------------------------
-- physical models, might get moved to its own config file
thermoType
{
    type            heSolidThermo;
    mixture         pureMixture;
    transport       constIso;
    thermo          hConst;
    equationOfState rhoConst;
    specie          specie;
    energy          sensibleInternalEnergy;
}

mixture
{
    // Chromium

    specie
    {
        molWeight       166.53;
    }
    equationOfState
    {
        rho             8670;
    }
    transport
    {
        kappa           17.3;
    }
    thermodynamics
    {
        Hf              0;
        Cp              426.4;
    }
}

-- fluid
thermoType
{
    type            hePsiThermo;
    mixture         pureMixture;
    transport       sutherland;
    thermo          hConst;
    equationOfState perfectGas;
    specie          specie;
    energy          sensibleInternalEnergy;
}

mixture
{
    specie
    {
        nMoles          1;
        molWeight       28.9596;
    }
    thermodynamics
    {
        Cp            	1004.5;
        Hf           	0;
    }
    transport
    {
        As              1.458e-06;
        Ts              110.4;
    }
}


-------------------------------------------------------------------------------------------

model StructureModel (qw) {
  technique : FEM;
  boundaryField : (Everywhere,  Neumann, qw);
  physics : HeatTransfer{P};
  const rhos = P.SolidDensity;
  const ks = P.SolidThermalConductivity;
  const cps = P.SolidSpecificHeat;
  var Tw;
  rhos*cps*∇Tw- ks*△Tw = qw;
  solve Tw with {eSolid, eFinalSolid, nSolid};
  return Tw;
  }

model FluidModel(Tw) {
  output : qw;
  technique : FVM;
  boundaryField: (Everywhere, Dirichlet, P.InitialSolidTemperature);
  physics : FluidFlow {F};
  const gamma = F.standardAir.ratio_Specific_Heat; -- a perfect gas
  const mu = F.sutherland.viscosityRef; -- dynamic viscosity, depends on temperature!
  const R =  F.standardAir.GasConstant; -- specific gas constant
  const Pr = F.constant_prandtl.LaminarPrandtlNumber; -- Prandtl number

  -- variables we are solving for
  var U; -- velocity with x, y, z components (U = [u, v, w])
  var e;  -- internal energy
  var rhof; -- fluid density
  var T; -- fluid temperature, depends on e
  var k; -- thermal conductivity, depends on mu
  var mu; -- dynamic viscosity, depends on T
  var P; -- pressure, depends on T
  var tau; -- viscous stress tensor

  -- ... removing math for now

  solve U with {restFluid, nFluid};
  solve e with {restFluid, nFluid};
  solve rhof with {restFluid, nFluid};
  solve T with {restFluid, nFluid};
  solve k with {restFluid, nFluid};
  solve mu with {restFluid, nFluid};
  solve P with {pressureFluid, nFluid};
  solve tau with {restFluid, nFluid};
  return qw;
  }

couple coupleModels1 (Tin) {
  var qw; -- heat flux
  qw = FluidModel(Tin);
  Tout = ModelSolid (qw);
  return Tout;
  }
