-- TODO: Compiler work we need to do
-- Y: Questions for yerim

config {
    timeStep : 5 ms;-- size of the time step
    iterations : 200; -- total number of time steps
    const Temp = 300 K; -- SOLID_TEMPERATURE_INIT
    run: f(Temp);
    backend : Su2 {
        format : LIB_FormatCP,
        -- Y: What is the right value here?
        time : 200,
        -- TODO: Allow 3 parameters to plotting markers
        plotting : (cylinderouter1, cylinderouter2, cylinderouter3, cat)
      };
}

-- Y: Where should TimeDependency and GridDeformation be defined in LINK?

model FluidModel (Tw){
  technique : FVM;
  boundaryField : (top, Neumann, 0 ); (right, Dirichlet, 273); (bottom, Neumann, 0); (left, Dirichlet, 573);
  -- TODO: Allow the following line
  -- boundaryField: MARKER_FAR= ( MarkerName.farfield );
  physics : HeatConduction{LIB_PhysicsParameters_CPFluid};
  -- Y: Why are these lines here? What code are you expecting it to generate?
  --    What are the corresponding lines for the test problem?
  -- SOLVER= RANS;
  -- KIND_TURB_MODEL= SA;
 -- TODO: paused on math equations for now
  const DT = 4;
  solve Temp with {LIB_SolvingTechnique1, LIB_NumericalScheme1};
  return qw;
}

model ModelSolid (Tw) {
    technique : FEM;
    boundaryField : (top, Neumann, 0 ); (right, Dirichlet, 273); (bottom, Neumann, 0); (left, Dirichlet, 573);
    -- TODO: Allow the following line
    -- boundaryField : MARKER_ISOTHERMAL= ( MarkerName.solid_surace, 300.0 );
    physics : HeatConduction{LIB_PhysicsParameters_CPSolid};
    -- Y: Could these lines be somewhere else?
    -- OBJECTIVE_FUNCTION = TOTAL_HEATFLUX; -- evaluated at the surfaces listed in MARKER_MONITORING
    -- OBJECTIVE_WEIGHT= 1.0
    -- TODO: Add support for library use
    -- TODO: Add support for fractions
    const rhos =  8 g/cm^3; --P.SolidDensity; 8.67
    const ks = 17 W/(m*K); -- P.SolidThermalConductivity; 17.3 W/(m*K)
    const cps = 426 J/(kg*K); -- P.SolidSpecificHeat;426.4 J/(kg*K);
    rhos*cps*∇Tw- ks*△Tw = qw;
    (∂ Temp) /(∂ t) - DT * △Temp  = 0;
    solve Tw with {LIB_NumericalScheme_CPSolid, LIB_SolvingTechnique_CPSolid};
    -- Y: Do the keywords here generate all the values you are thinking of?
    return Tw;
}

couple f FluidModel ModelSolid (Tin){
  qw = FluidModel(Tin);  -- heat flux
  out = ModelSolid (qw);
  return out;
  }
