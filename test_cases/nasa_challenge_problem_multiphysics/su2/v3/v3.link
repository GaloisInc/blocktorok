mesh FluidMesh {
  source: "/home/jlamar/something/fluid.mesh"
  surfaces: [ inflow,
              outflow,
              symmetric,
              wall       ]
}

mesh VehicleMesh {
  source: "vehicle.mesh"
  surfaces: [ wall, symmetry ]
}

physics VehicleHE:
  HeatEquation {
    density = 10, -- these might be more complex than numbers
    conductivity = 6,
    specific_heat = 7,
    iterations = 100
  }

physics FluidPhys:
  NavierStokes {
    iterations = 10000,
    -- ???
  }

backend config_x {
  backend: su2
  config: "su2.config"
  fluidConfig: "fluid.config"
}

backend config_foam {
  backend: openfoam
  config: [ ]
}

model SFModel {

  domain Vehicle {
    mesh: VehicleMesh
    physics: VehicleHE
  }

  domain Fluid {
    config: config_x.fluidConfig
    mesh: FluidMesh
    physics: FluidPhys
      -- are things to solve for implied by physics?

    boundary {
      surface: inflow


      condition:
      -- these parameters should have good names
        Inlet {

          x_velocity = 200.0,
          blah = 57.4,
          andblah = 2000,
          param4 = 0,
          param5 = 0
        }
    }

    boundary MARKER_SUPERSONIC_OUTLET: NavierStokesFVMOutflow { }
    boundary MARKER_ISOTHERMAL:  NavierStokesFVMCylinder { } -- ???
  }

  coupling FluidStructureHT {
    surfaces: [Fluid.MARKER_ISOTHERMAL, Structure.MARKER_ISOTHERMAL]
    physics: HeatTransfer { }
  }
}



simulation {
  timeDomain:
    Transient {
      time_step = 5e-3
      iterations = 200
    }

  couplingIterations: 1000
  plot: [ SFModel.FluidStructureHT.Tw ]
  backend: config_x
}


{-
Yerim Lee11:08 AM
velocity:
type: fixedValue
value: uniform 1
temp:
type: fixedValue
value: uniform 300
pressure:
type: totalPressure
value: x
INLET_TYPE= MASS_FLOW
MARKER_INLET = (inlet1, 1.13 , 20, 1.0, 0.0, 0.0, inlet2, 1.15, 10, 0.0, 1.0, 0.0)
Yerim Lee11:10 AM
INLET_TYPE= TOTAL_CONDITIONS
MARKER_INLET = (inlet1, 300, 1e6, 1.0, 0.0, 0.0, inlet2, 400, 1e6, 0.0, 1.0, 0.0)
temp:
type: totalTemp
value: uniform 300
pressure:
type: totalPressure
value: uniform 1e6


temperature:
    type: fixedValue
    value: uniform 200
pressure:
    type: fixedValue
    value: uniform 57.4
velocity:
    type: fixedValue
    value: uniform (2000, 0, 0)

velocity:
                           ZeroGradient
     type: zeroGradient -- FixedGradient { value = 0; }
-}