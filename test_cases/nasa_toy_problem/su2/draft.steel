--------------------------------------------------------------------
-- LINK code Documentation --
--------------------------------------------------------------------
config {
	-- no timeStep for steady state
	iterations : 10000 -- total number of time steps
	-- need to plotting
    plot : marker.cylinder_outer1, marker.cylinder_outer2, marker.cylinder_outer3, marker.cylinder_inner1, marker.cylinder_inner2, marker.cylinder_inner3
	run: coupleModels1 (Tw)
	Backend : SU2
}

model StructureModel1 (qw) {
  technique : FEM;

  boundaryField : MARKER_ISOTHERMAL= ( MarkerName.solid_surface1, 350.0 ); --NEEDS TO BE FIXED/REFORMATTED TO MATCH CURRENT SYNTAX

  physics : HeatEquation{P};
  -- initial and constant variables
  Tw = 350.0 K;
  const rhos = 0.000210322 kg/m^3;
  const ks = 0.1028 W/(m*K);
  const cps = 1004.703 J/(kg*K);
  var Tw;
  rhos*cps*∇Tw- ks*△Tw = qw;
  solve Tw with {numSolidScheme, linSolver, convSolidParams, heatMethod};
  return Tw;
  }

  model StructureModel2 (qw) {
  technique : FEM;

  boundaryField : MARKER_ISOTHERMAL= ( MarkerName.solid_surface2, 350.0 ); --NEEDS TO BE FIXED/REFORMATTED TO MATCH CURRENT SYNTAX

  physics : HeatEquation{P};
  -- initial and constant variables
  Tw = 350.0 K;
  const rhos = 0.000210322 kg/m^3;
  const ks = 0.1028 W/(m*K);
  const cps = 1004.703 J/(kg*K);
  var Tw;
  rhos*cps*∇Tw- ks*△Tw = qw;
  solve Tw with {numSolidScheme, linSolver, convSolidParams, heatMethod};
  return Tw;
  }

  model StructureModel3 (qw) {
  technique : FEM;

  boundaryField : MARKER_ISOTHERMAL= ( MarkerName.solid_surface3, 350.0 ); --NEEDS TO BE FIXED/REFORMATTED TO MATCH CURRENT SYNTAX

  physics : HeatEquation{P};
  -- initial and constant variables
  Tw = 350.0 K;
  const rhos = 0.000210322 kg/m^3;
  const ks = 0.1028 W/(m*K);
  const cps = 1004.703 J/(kg*K);
  var Tw;
  rhos*cps*∇Tw- ks*△Tw = qw;
  solve Tw with {numSolidScheme, linSolver, convSolidParams, heatMethod};
  return Tw;
  }

model FluidModel(Tw) {
  output : qw;
  technique : FVM;
  SOLVER= INC_NAVIER_STOKES;
  KIND_TURB_MODEL= NONE;

  boundaryField: MARKER_FAR= ( MarkerName.farfield ); --NEEDS TO BE FIXED

  physics : FluidFlow {F};

  -- initial values (THEY'RE ALSO PRESENT IN THE PHYSICAL MODELS)
  u= 3.40297;
  v= 0.0;
  w= 0.0;
  rhof= 0.000210322;
  T= 288.15;
  KT_CONSTANT= 0.0257;
  PRANDTL_LAM= 0.72;
  PRANDTL_TURB= 0.90;
  SPECIFIC_HEAT_CP= 1004.703;
  MOLECULAR_WEIGHT= 28.96;
  MU_CONSTANT= 1.7893e-05;
  MU_REF= 1.716E-5;
  MU_T_REF= 273.15;

  -- THE MATH AND THE VARIABLES ARE WRONG AND NEED TO BE UPDATED!!!
  -- variables we are solving for
  var u; -- velocity in x direction (U = [u, v, w])
  var v; --  velocity in y direction (U = [u, v, w])
  var w; -- velocity in z direction (U = [u, v, w])
  var e;  -- internal energy
  var rhof; -- fluid density
  var T; -- fluid temperature, depends on e
  var k; -- thermal conductivity, depends on mu
  var mu; -- dynamic viscosity, depends on T
  var P; -- pressure, depends on T
  var tau; -- viscous stress tensor

  -- ... removing math for now

  solve u with {numFlowScheme, linSolver, convFlowParams, slopeParams, flowMethod, turbulentMethod};
  solve u with {numFlowScheme, linSolver, convFlowParams, slopeParams, flowMethod, turbulentMethod};
  solve w with {numFlowScheme, linSolver, convFlowParams, slopeParams, flowMethod, turbulentMethod};
  solve e with {numFlowScheme, linSolver, convFlowParams, slopeParams, flowMethod, turbulentMethod};
  solve rhof with {numFlowScheme, linSolver, convFlowParams, slopeParams, flowMethod, turbulentMethod};
  solve tau with {numFlowScheme, linSolver, convFlowParams, slopeParams, flowMethod, turbulentMethod};
  -- I think T, k, mu, P are solved directly using the closure equations from the Navier-Stokes variables
  return qw;
  }

couple coupleModels1 (Tin) {
  var qw; -- heat flux
  coupled1 = CoupledSurfaces(cylinder_outer1, cylinder_inner1);
  coupled2 = CoupledSurfaces(cylinder_outer2, cylinder_inner2);
  coupled3 = CoupledSurfaces(cylinder_outer3, cylinder_inner3);
  qw = FluidModel(Tin, coupled1, coupled2, coupled3);
  Tout1 = ModelSolid1 (qw, coupled1);
  Tout2 = ModelSolid2 (qw, coupled2);
  Tout3 = ModelSolid3 (qw, coupled3);
  return Tout;
  }


--------------------------------------------------------------------
-- physicsModel in FluidModel --
--------------------------------------------------------------------
Only supported by the following built-in keyword LIB_PhysicsParameters1 which will generate

FlowDefinition {
  INC_DENSITY_MODEL= VARIABLE;
  INC_ENERGY_EQUATION = YES;
  INC_DENSITY_INIT= 0.000210322;
  INC_VELOCITY_INIT= ( 3.40297, 0.0, 0.0 );
  INC_TEMPERATURE_INIT= 288.15;
  INC_NONDIM= DIMENSIONAL;
}

thermalConductivity {
  CONDUCTIVITY_MODEL= CONSTANT_PRANDTL;
  KT_CONSTANT= 0.0257;
  PRANDTL_LAM= 0.72;
  PRANDTL_TURB= 0.90;
}

fluidModel {
  FLUID_MODEL= INC_IDEAL_GAS;
  SPECIFIC_HEAT_CP= 1004.703;
  MOLECULAR_WEIGHT= 28.96;
}

viscosityModel {
  VISCOSITY_MODEL= CONSTANT_VISCOSITY;
  MU_CONSTANT= 1.7893e-05;
  MU_REF= 1.716E-5;
  MU_T_REF= 273.15;
  SUTHERLAND_CONSTANT= 110.4; -- Sutherland Constant
}

--------------------------------------------------------------------
-- SolvingTechnique in FluidModel --
--------------------------------------------------------------------
Only supported by the following built-in keyword LIB_SolvingTechnique1 which will generate
-- this is duplicated for the solid model

ConvergenceParams {
  CONV_RESIDUAL_MINVAL= -19;
  CONV_STARTITER= 10;
  CONV_CAUCHY_ELEMS= 100;
  CONV_CAUCHY_EPS= 1E-6; -- these values seem to be defaults
}

ObjectiveFunction{
  OBJECTIVE_FUNCTION = TOTAL_HEATFLUX; -- evaluated at the surfaces listed in MARKER_MONITORING
  OBJECTIVE_WEIGHT= 1.0
  MARKER_MONITORING= (cylinder_outer1, cylinder_outer2, cylinder_outer3);
}

--------------------------------------------------------------------
-- NumericalSchemeType in FluidModel --
--------------------------------------------------------------------
Only supported by the following built-in keyword LIB_NumericalScheme1 which will generate

NumericalSchemes {
  NUM_METHOD_GRAD= GREEN_GAUSS;
  CFL_NUMBER= 10.0;
  CFL_ADAPT= NO;
  CFL_ADAPT_PARAM= ( 1.5, 0.5, 10.0, 10000.0 );
  RK_ALPHA_COEFF= ( 0.66667, 0.66667, 1.000000 );
}

FlowNumericalMethod {
  CONV_NUM_METHOD_FLOW= FDS;
  MUSCL_FLOW= YES;
  SLOPE_LIMITER_FLOW= NONE;
  TIME_DISCRE_FLOW= EULER_IMPLICIT;
}

--------------------------------------------------------------------
-- GridDeformation in Model --
--------------------------------------------------------------------
Only supported by the following built-in keyword GridDeformation which will generate
Fixing grid deformations

GridDeformation {
  DEFORM_LINEAR_SOLVER= FGMRES;
  DEFORM_LINEAR_SOLVER_ITER= 200;
  DEFORM_NONLINEAR_ITER= 1;
  DEFORM_CONSOLE_OUTPUT= YES;
  DEFORM_STIFFNESS_TYPE= INVERSE_VOLUME;
  VISUALIZE_VOLUME_DEF= YES;
}


--------------------------------------------------------------------
-- physicsModel in SolidModel --
--------------------------------------------------------------------
Only supported by the following built-in keyword LIB_PhysicsParameters2 which will generate
-- All 3 solid models share the same parameters

ConductionDefinition {
  INC_NONDIM = DIMENSIONAL;
  SOLID_TEMPERATURE_INIT= 350.0 K;
  SOLID_DENSITY = 0.000210322 kg/m^3;
  SPECIFIC_HEAT_CP = 1004.703 J/(kg*K);
  SOLID_THERMAL_CONDUCTIVITY = 0.1028 W/(m*K);
}

--------------------------------------------------------------------
-- SolvingTechnique in SolidModel --
--------------------------------------------------------------------
Only supported by the following built-in keyword LIB_SolvingTechnique2 which will generate
-- All 3 solid models share the same parameters

LinearSolver {
  LINEAR_SOLVER= FGMRES;
  LINEAR_SOLVER_PREC= ILU;
  LINEAR_SOLVER_ERROR= 1E-15;
  LINEAR_SOLVER_ITER= 5; -- these values seem to be defaults
}

ConvergenceParams {
  CONV_RESIDUAL_MINVAL= -19;
  CONV_STARTITER= 10;
  CONV_CAUCHY_ELEMS= 100;
  CONV_CAUCHY_EPS= 1E-6; -- these values seem to be defaults
}

ObjectiveFunction {
  OBJECTIVE_FUNCTION = TOTAL_HEATFLUX; -- evaluated at the surfaces listed in MARKER_MONITORING
  OBJECTIVE_WEIGHT= 1.0
}

--------------------------------------------------------------------
-- NumericalSchemeType in SolidModel --
--------------------------------------------------------------------
Only supported by the following built-in keyword LIB_NumericalScheme2 which will generate
-- All 3 solid models share the same parameters

HeatNumericalMethod {
  TIME_DISCRE_HEAT= EULER_IMPLICIT
}

NumericalSchemes {
  NUM_METHOD_GRAD= GREEN_GAUSS;
  CFL_NUMBER= 10.0;
  CFL_ADAPT= NO;
  CFL_ADAPT_PARAM= ( 1.5, 0.5, 10.0, 10000.0 );
  RK_ALPHA_COEFF= ( 0.66667, 0.66667, 1.000000 ); -- these values seem to be defaults
}
