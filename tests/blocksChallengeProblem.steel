-- This represents the rough shape of a typical LINK program. Every LINK
-- program consists of three sections:
--
-- 1. A global configuration
-- 2. Coupling configuration for every pair of models
-- 3. One or more models

-------------------------------------------------------------------------------

-- The configuration block will set globally important parameters. Including:
--  * duration (total time to run)
--  * stepsize
--  * input parameters for the coupling process
--
-- As defined the coupling block gets the surface temperature, Tw, as input
--  and runs for the total amount of time.
-- It is executed as "couple (couple (couple Tw))"

config {
    totalTime: 10 ms;
    Tw : conduction_condition_definition.InitialSolidTemperature;
    Run: couple Tw;
}

-------------------------------------------------------------------------------

-- The coupling blocks will effectively define the coordination between each
--  pair of models. The LINK compiler statically checks that for every pair of
--  models introduced above, there is a single coupling block.
--
-- The coupling blocks are introduced with the keyword `couple` followed by
--  * two identifiers (that each define a model)
--  * input parameters for the coupling process
--  * braces
--
-- Defined inside the braces can be
-- zone interface to define the interface between the two physics domains
-- * equations governing the behavior at the interface between
--   the two models and any other information necessary to communicate data
--   between the models as appropriate.
-- * the algorithm describing the information flow
-- * the output that serves as input for the next run

couple ModelFluid ModelSolid arg {
  -- computes heat flux: qw
  zone interface = (ModelFluid.marker, ModelSolid.marker) -- define the interface between the two physics domains
  qw = ModelFluid (arg)
  tw = ModelSolid (qw)
  output = tw
}

-------------------------------------------------------------------------------

-- Models are introduced with the keyword `model` followed by
--  * an identifier (starting with an alphabetic character followed by zero or
--    more letters, digits, underscores, or single-quotes). The identifier can
--    be thought of as the domain as one would see in a typical physics paper.
--  * input parameter for the model
--  * braces
--
-- Defined inside braces can be
--  * technique: solving technique.
--  * output : output parameter
--  * physics :type of physics
--  * model : model parameters associated with that type of physics
--  * solveV:  variables used in the math that we are solving for
--  * math: (multiple) equations governing the behavior in model
--  * boundary : boundary conditions

-- Model that captures the structural heat transfer.
-- Input is heat flux (qw). The computations gets the solid temperature
--  distribution for the current time step using FEM.
model ModelStructure qw{
    output : Tw
    technique: FEM;
    boundary : Neumann (qw)
    physics: Heat
    ModelType : Structure {
      definition = conduction_condition_definition
    }
    ---
    -- Heat conduction based on Zhang et al and SU2
    solveV:
        Ts;  -- solid temperature
    math:
        rhos = conduction_condition_definition.SolidDensity -- solid density
        ks = conduction_condition_definition.SolidThermalConductivity -- solid thermal conductivity (function of T)
        cps = conduction_condition_definition.SolidSpecificHeat -- solid specific heat (function of T)
        rhos*cps∇Ts - ks*△Ts = qw
}


-- Model that captures aerodynamic flow.
-- Get boundary heat flux (qw) using FVM
model ModelFluid Tw{
    output : qw
    technique: FVM;
    boundary: Dirichlet (Tw = conduction_condition_definition.InitialSolidTemperature);
    -- Isothermal under Dirichlet definition
    ModelType : Fluid {
      solver = compressibleFreeStreamDefinition,
      fluidModel = standardAir
      ViscosityModel =  sutherland
      thermalConductivityModel = constant_prandtl
    }
    ---
    -- How should we express the compressible navier stokes equation
    --
    -- first try at the math based on Su2
    -- https://su2code.github.io/docs_v7/Theory/
    solveV:
        u, v, w -- velocities in x,y,z directions
        p; -- static pressure
        T;  -- temperature from ideal gas equation of state
        rhof; -- fluid density
    math:
        -- a perfect gas with a ratio of specific heat
        γ = standardAir.ratio_Specific_Heat
        -- flowspeed in cartesian system
        vBar = {u, v, w}
        -- defined in library. model parameters
         -- viscosity
        mu = sutherland.viscosityRef
         -- specific gas constant
        R =  standardAir.GasConstant
        -- Prandtl number
        Pr = constant_prandtl.LaminarPrandtlNumber
        U = {rhof, rhof*vBar, rhof*E } -- conservative variables
        p = (γ-1) rhof [E-0.5(vbar • vbar)]
        tauBar = mu (∇ vBar + ∇ vBar^T) - mu *(2/3) *IBar (∇•vBar)
        T = p / (rhof * R)
        FC = {
            rhof*vBar, rhof*vBar ⊗ vBar + IBar*p,  rhof*E*vBar  + p*vBar
            } -- convective fluxes
        FV = {., tauBar, tauBar•v + kappa * ∇T }  -- viscous fluxes
          -- what is this dot suppose to be?
        tauBar;  -- viscous stress tensor
        R(U) = ∇U + ∇•FC(U) - ∇•FV(U, ∇U) - S = 0
        kappa =  mu * cp / Pr -- thermal conductivity
    undefined:
      IBar = --?
      S = qw -- for the challenge problem, the heat flux?
      E = ??  -- total energy per unit mass. Haven't filled in function.

    --
    -- Second try at the math based on toy problem
    -- https://drive.google.com/file/d/11UyH8SJ0GpQ3fWmcHf9F8TJx6VwbciBV/view?usp=sharing
    solveV:
        u, v, w -- velocities in x,y,z directions
        p; -- static pressure
        Tw;  -- temperature from ideal gas equation of state
        po; -- fluid density
    math:
        mu = sutherland.viscosityRef
        cp = standardAir.ratio_Specific_Heat -- specific heat
        -mu *△u + po*(u•∇ )*u+ ∇p +po * B *Tw* g = po*(1+B*To)* g
        kF* △Tw + po* cp*(u • ∇Tw)  = qw
    undefined:
      B = ?? -- coefficient of thermal expansion
      kF = ?? -- thermal conductivities of the fluid
      qw, g, To = ??
}
