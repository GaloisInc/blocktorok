-- This represents the rough shape of a typical LINK program. Every LINK
-- program consists of three sections:
--
-- 1. A global configuration
-- 2. Coupling configuration for every pair of models
-- 3. One or more models

-------------------------------------------------------------------------------

-- The configuration block will set globally important parameters. Including:
--  * duration (total time to run)
--  * stepsize
--  * input parameters for the coupling process
--
-- As defined the coupling block gets the surface temperature, Tw, as input
--  and runs for the total amount of time.
-- It is executed as "couple (couple (couple Tw))"

config {
    totalTime: 10 ms;
    Tw : 293 K;
    Run: couple Tw;
    -- Mach number = 5.94;
    -- Isothermal = 300 K
}

-------------------------------------------------------------------------------

-- The coupling blocks will effectively define the coordination between each
--  pair of models. The LINK compiler statically checks that for every pair of
--  models introduced above, there is a single coupling block.
--
-- The coupling blocks are introduced with the keyword `couple` followed by
--  * two identifiers (that each define a model)
--  * input parameters for the coupling process
--  * braces
--
-- Defined inside the braces can be
-- * equations governing the behavior at the interface between
--   the two models and any other information necessary to communicate data
--   between the models as appropriate.
-- * the algorithm describing the information flow
-- * the output that serves as input for the next run

couple ModelFluid ModelSolid arg {
  -- computes heat flux: qw
  qw = ModelFluid (arg)
  tw = ModelSolid (qw)
  output = tw
}

-------------------------------------------------------------------------------

-- Models are introduced with the keyword `model` followed by
--  * an identifier (starting with an alphabetic character followed by zero or
--    more letters, digits, underscores, or single-quotes). The identifier can
--    be thought of as the domain as one would see in a typical physics paper.
--  * input parameter for the model
--  * braces
--
-- Defined inside braces can be
--  * technique: solving technique.
--  * output : output parameter
--  * physics :type of physics
--  * math: (multiple) equations governing the behavior in model
--  * model : model parameters associated with that type of physics
--  * variables: matching of variables in math with model parameters
--  * boundary : boundary conditions

-- Model that captures the structural heat transfer.
-- Input is heat flux (qw). The computations gets the solid temperature
--  distribution for the current time step using FEM.
model ModelStructure qw{
    output : Tw
    technique: FEM;
    boundary : Neumann (qw)
    physics: Heat
    ModelType : Structure {
      definition = conduction_condition_definition
    }
}


-- Model that captures aerodynamic flow.
-- Get boundary heat flux (qw) using FVM
model ModelFluid Tw{
    output : qw
    technique: FVM;
    boundary: Dirichlet (Tw = 300K);
    -- Isothermal under Dirichlet definition
    ModelType : Fluid {
      solver = compressibleFreeStreamDefinition,
      fluidModel = standardAir
      ViscosityModel =  sutherland
      thermalConductivityModel = constant_prandtl
    }
    ---
    -- How should we express the compressible navier stokes equation
    --
    -- first try at the math based on Su2
    -- https://su2code.github.io/docs_v7/Theory/
    variables:
      mu = sutherland.viscosityRef -- viscosity
      γ = -- a perfect gas with a ratio of specific heat
      R =  standardAir.GasConstant -- specific gas constant
      Pr = constant_prandtl.LaminarPrandtlNumber-- Prandtl number
      IBar = --?
      S =  ? -- generic source terms
      rho = -- fluid density
      E = -- total energy per unit mass
    math :
      vBar = {u, v, w} -- flowspeed in cartesian system
      U = {rho, rho*vBar, rho*E } -- conservative variables
      p = (γ-1) rho [E-0.5(vbar • vbar)] -- static pressure
      FC = {
          rho*vBar, rho*vBar ⊗ vBar + IBar*p,  rho*E*vBar  + p*vBar
        } -- convective fluxes
      tauBar = mu (∇ vBar + ∇ vBar^T) - mu *(2/3) *IBar (∇•vBar) -- viscous stress tensor
      T = p / (rho * R) -- temperature from ideal gas equation of state
      FV = {., tauBar, tauBar•v + kappa * ∇T }  -- viscous fluxes
      R(U) = ∇U + ∇•FC(U) - ∇•FV(U, ∇U)-S = 0
      kappa =  mu * cp / Pr -- thermal conductivity


    --
    -- Second try at the math based on toy problem
    -- https://drive.google.com/file/d/11UyH8SJ0GpQ3fWmcHf9F8TJx6VwbciBV/view?usp=sharing
    variables:
      mu = sutherland.viscosityRef -- molecular viscosity
      B = -- coefficient of thermal expansion
      cp = standardAir.ratio_Specific_Heat -- specific heat
      kf = -- thermal conductivities of the fluid
      qf = source terms
      po, p, g =  ??
    math :
      -mu *△u + po*(u•∇ )*u+ ∇p +po * B *Tw* g = po*(1+B*To)* g
      kF* △TF + po* cp*(u • ∇Tw)  = qw
}
