-- This represents the rough shape of a typical LINK program. Every LINK
-- program consists of three sections:
--
-- 1. A global configuration
-- 2. One or more models
-- 3. Coupling configuration for every pair of models
--
-- Each of these is described below in comments like this one.

-------------------------------------------------------------------------------

-- The configuration block will set globally important parameters. Right now,
-- that's only the step size (no units support just yet) and a duration (either
-- a number of steps to take or a total time to run for). The order of things
-- (currently) matters, and we'll probably discover there are useful fields to
-- add here.

-- These values are totally made up for now
config {
    step: 17;
    totalTime: 10;
}

-------------------------------------------------------------------------------

-- Models are introduced with the keyword `model` followed by an identifier
-- (starting with an alphabetic character followed by zero or more letters,
-- digits, underscores, or single-quotes). In braces will be the parameters
-- defining the model: For now, this is simply the solving technique. The
-- identifier can be thought of as the domain as one would see in a typical
-- physics paper.

-- The two models presented here come from the NASA toy problem number 3
model F {
    input: p;
    output: TF;

    technique: FVM;

    boundary: Neumann(TF);

    physics: FluidFlow {0};

    const u = 1;
    const po = 1;
    const B = 1;
    const To = 1;
    const kF = 1;
    const cp = 1;

    var p;
    var TF;
    var g;
    var QF;

    -u * △u + po * (u•∇) * u + ∇p + po * B * TF * g = po * (1 + B * To) * g;
    ∇•u = 0;
    kF * △TF + po * cp * (u • ∇TF) = QF;
}

model S {
    input: TF;
    output: Qs;

    technique: FEM;

    boundary: Dirichlet(TS);

    physics: HeatTransfer {0};

    const kF = 1;
    const n = 1;
    const ks = 1;

    var TS;
    var TF;
    var Ts;
    var Qs;

    TS = TF;
    kF * (n • ∇TF) = ks * (n • ∇TS);
    -ks * △Ts = Qs;
}

-------------------------------------------------------------------------------

-- The coupling blocks will effectively define the coordination between each
-- pair of models. The LINK compiler statically checks that for every pair of
-- models introduced above, there is a single coupling block. Coupling blocks
-- will contain the equations governing the behavior at the interface between
-- the two models and any other information necessary to communicate data
-- between the models as appropriate. A coupling is introduced with the keyword
-- `couple` followed by two identifiers (that must have been introduced above).
-- In braces will be fields defining the coupling parameters (currently,
-- nothing).
couple F S { }
