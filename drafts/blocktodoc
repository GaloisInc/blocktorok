Input:

```
battle {
  hero {
    name: "Phrobald the Halfling"
    hp: Fixed { amount = 50 }
    damage: Dice { sides = 6, number = 2 }
  }

  orc {
    hp: Dice { number = 1, sides = 6 }
    damage: Fixed { amount = 2 }
  }

  orc {
    hp: Dice { number = 1, sides = 6 }
    damage: Fixed { amount = 2 }
  }

  orc {
    hp: Dice { number = 1, sides = 6 }
    damage: Fixed { amount = 2 }
  }

  minotaur {
    hp: Dice { number = 4, sides = 8 }
    damage: Dice { number = 1, sides = 8}
  }
}
```

Schema(schema.ocs):

```
union value {
  [-- Roll a die with `sides` sides `number` times --]
  Dice { number: int, sides: int };

  [-- A fixed amount --]
  Fixed { amount: int };
}

block creature {
  [-- The number of hitpoints a creature has  --]
  .hp: value

  [-- The amount of damage a creature does --]
  .damage: value
}

block hero {
  [-- The hero's bold name --]
  .name: string

  [-- Hero hitpoints --]
  .hp: value

  [-- Hero damage --]
  .damage: value
}

-- could also be expressed as:

block hero extends creature {
    [-- The hero's bold name --]
  .name: string
}

block battle {
  [-- The dauntless heroes in the battle --]
  .hero: hero*

  [-- The fell orcs opposing the hero --]
  .orc: creature*

  [-- The forbidding minotaurs opposing the hero --]
  .minotaur: creature*
}

root {
  .battle: battle
}
```


Transformer:

```
schema "schema.ocs"

output = file("orcs.py")

render value.Dice      |Roll(${number}, ${sides})
render value.Fixed     |Fixed(${amount})

render battle.hero     |Creature("${name}", ${hp}, ${dmg})
render battle.orc      |Creature("Orc", ${hp}, ${dmg})
render battle.minotaur |Creature("Minotaur", ${hp}, ${dmg})

render battle
  |from battle import *
  |heroes = [${join(", ", battle.hero)}]
  |orcs = [${join(", ", battle.orc)}]
  |minotaurs = [${join(", ", battle.minotaur)}]
  |battle(heroes, orcs + minotaurs)

output << battle
```


Output:

```
from battle import *
heroes = [Creature("Phrobald the Halfling", Fixed(50.0), Roll(6.0, 2.0))]
orcs = [Creature("Orc", Roll(6.0, 1.0), Fixed(2.0)), Creature("Orc",
Roll(6.0, 1.0),
Fixed(2.0)), Creature("Orc", Roll(6.0, 1.0), Fixed(2.0))]
minotaurs = [Creature("Minotaur", Roll(8.0, 4.0), Roll(8.0, 1.0))]
battle(heroes, orcs + minotaurs)
```











monsters {
  orc: [ ... ]
  orc Jarvis {
    name: "Jarvis the Orc"
    age: 12
    hobbies: ["crochet", "romantic poetry", "cybernetics"]
  }

  orc Leopold {
    name: "Leopold"
    hobbies: ["macrame", "french cooking", "control theory"]
  }
}

Jarvis the Orc (Age 12)
  Likes: crochet, romantic poetry, cybernetics

Jarvis the Orc (Age 12)
  Likes: crochet, romantic poetry, cybernetics

---------------------------------------

orcs = file("orcs.dat")

schema.ocs:

evil {
  .is_demonic: bool
  .is_sentient: bool
}

weapons extends evil {
  .is_fauchard: bool
  .is_voulge: bool
  .eviltype: string
}

sentient_weapon extends evil, weapons {

}

orc_schema {
  .name: string
  .age: option int
  .hobbies: list string
}


orc_schema =
  schema
    .name: string
    .age: option int
    .hobbies: list string

monster_schema =
  schema
    .orc: orc_schema*

experiment.ocs:

experiment =
  schema
    ..


su2.ocs:
pull in "experiment.ocs"

augment experiment with
  schema
    .su2: su2_config

su2_experiement extends experiment {
  .backend.su2: su2_config
}



parser.oca:

root schema "schema.ocs" as monster


require monster.orc.age > 0 "orcs cannot have negative age"

for monsters.orc
  require age > 0 "orcs cannot have negative age"





validate monsters.orc orc_schema

schema monsters

for monsters.orc
  for friend
    ...
  age <- aga as int





ms = map monsters.orc {
  name <- name as string
  age <- age as (option int)
  hobbies <- hobbies as (list string)

  age_desc = if exists(age) then "(Age ${age})" else ""

  return
    |${name} ${age_desc}
    |   Likes: ${ join(hobbies, ", ") }
}

orcs << join(ms, "\n")



experiment K {
  model S {
    domain Y {

    }

    domain Z {

    }
  }
}

