-- TODO Add units

-- import P = lib.conduction_condition;
-- import V = lib.fluid_flow;

config {
  timeStep : 2;
  totalTime : 10;
  --Tw = P.InitialSolidTemperature;
  -- Run: couple (ModelFluid, ModelSolid, Tw);
  }

model StructureModel(qw) {
  output : Tw;
  -- Convention from the Zhang paper: Tw (YL)
  -- Convention from the toy problem #3: Ts (YL)
  technique : FEM;
  boundary : Neumann(qw);
  physics : HeatTransfer {P};
  -- TODO arg to HeatTransfer should be 'P'
  -- physics : HeatTransfer {P};
  rhos = P.SolidDensity;
  ks = P.SolidThermalConductivity;
  cps = P.SolidSpecificHeat;
  var Tw;   -- solid temperature
  rhos*cps*∇Tw- ks*△Tw = qw;

  }

model FluidModel(Tw) {
  output : qw;
  technique : FVM;
  boundary: Dirichlet (Tw);
  -- TODO change input to boundary conditions
  -- boundary: Dirichlet (P.InitialSolidTemperature);
  physics : FluidFlow {tmp};
  -- Why don't we put this in a library, just to be consistent with HeatTransfer
  -- TODO Add Fluid constructor
  -- physics : ModelType : FluidFlow {
  --   solver = compressibleFreeStreamDefinition,
  --   fluidModel = standardAir
  --   ViscosityModel =  sutherland
  --   thermalConductivityModel = constant_prandtl
  -- }


  const IBar = 0; -- FIXME initiation
  const s = 0; -- FIXME initiation
  const E = 0; -- FIXME initiation
  gamma = standardAir.ratio_Specific_Heat; -- a perfect gas
  mu = sutherland.viscosityRef; -- viscosity
  R =  standardAir.GasConstant; -- specific gas constant
  Pr = constant_prandtl.LaminarPrandtlNumber; -- Prandtl number
  -- variables we are solving for
  var u; -- velocities in x,y,z directions
  var v;
  var w;
  var p; -- static pressure
  var T;  -- temperature from ideal gas equation of state
  var rhof; -- fluid density
  -- T = p / (rhof * R);
  -- kappa =  mu * cp / Pr; -- thermal conductivity
  -- TODO Missing the support for equations
  -- vBar = {u, v, w} -- flowspeed in cartesian system
  -- U = {rhof, rhof*vBar, rhof*E } -- conservative variables
  -- p = (γ-1) rhof [E-0.5(vbar • vbar)]
  -- R(U) = ∇U + ∇•FC(U) - ∇•FV(U, ∇U) - S = 0;
  -- tauBar = mu (∇ vBar + ∇ vBar^T) - mu *(2/3) *IBar (∇•vBar)-- viscous stress tensor
  --  FC = {
  --    rhof*vBar, rhof*vBar ⊗ vBar + IBar*p,  rhof*E*vBar  + p*vBar
  --    } -- convective fluxes
  -- FV = {., tauBar, tauBar•v + kappa * ∇T }  -- viscous fluxes
  -- FIXME what is this dot suppose to be?
  }

couple StructureModel FluidModel {
  input : Tin;
  output : Tout;
  var qw; -- heat flux
  qw = FluidModel(Tin);
  Tout = ModelSolid (qw);
  -- TODO add zone interface
  }

-- def couple (m1, m2, Tin):
--  qw = m1 (Tin)
--  Tout = m2 (qw);
--  return Tout
