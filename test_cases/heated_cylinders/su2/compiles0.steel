config {
  timeDomain: steady; -- steady state or transient simulation
  couplingIterations: 15000;
  const Temp1 = 288.15 K; -- SOLID_TEMPERATURE_INIT
  const Temp2 = 350.0 K; -- SOLID_TEMPERATURE_INIT
  run: coupleModels1(Temp1);
  run: coupleModels2(Temp2);
  run: coupleModels3(Temp2);
  backend : Su2 {
      format : LIB_InputOutput,
      sharedParams: LIB_SharedSettings,
      gridDeform: LIB_GridDeformation
  };
}

model SolidModel1 (qw) {
  technique : FVM;
  innerIterations: 10;
  mesh: mesh_cht_3cyl_ffd.su2;
  boundaryField : LIB_BoundaryConditionsSolid1;
  physics : HeatConduction{LIB_SolvingTechniqueSolid};
  const rhos = 0.00042 kg/m^3;
  const ks = 0.1 W/m*K;
  const cps = 1004.703 J/kg*K;
  rhos*cps*∇Tw- ks*△Tw = qw;
  solve Tw with {LIB_NumericalSchemeSolid, LIB_PhysicsParametersSolid1};
  return Tw;
}

model SolidModel2 (qw) {
  technique : FVM;
  innerIterations: 10;
  mesh: mesh_cht_3cyl_ffd.su2;
  boundaryField : LIB_BoundaryConditionsSolid2;
  physics : HeatConduction{LIB_SolvingTechniqueSolid};
  const rhos = 0.00042 kg/m^3;
  const ks = 0.1 W/m*K;
  const cps = 1004.703 J/kg*K;
  rhos*cps*∇Tw- ks*△Tw = qw;
  solve Tw with {LIB_NumericalSchemeSolid, LIB_PhysicsParametersSolid2_3};
  return Tw;
}

model SolidModel3 (qw) {
  technique : FVM;
  innerIterations: 10;
  mesh: mesh_cht_3cyl_ffd.su2;
  boundaryField : LIB_BoundaryConditionsSolid3;
  physics : HeatConduction{LIB_SolvingTechniqueSolid};
  const rhos = 0.00042 kg/m^3;
  const ks = 0.1 W/m*K;
  const cps = 1004.703 J/kg*K;
  rhos*cps*∇Tw- ks*△Tw = qw;
  solve Tw with {LIB_NumericalSchemeSolid, LIB_PhysicsParametersSolid2_3};
  return Tw;
}

model FluidModel (Tw) {
  technique : FVM;
  innerIterations: 1;
  mesh: mesh_cht_3cyl_ffd.su2;
  boundaryField : LIB_BoundaryConditionsFluid;
  physics : FluidFlow{LIB_SolvingTechniqueFluid};
  solve qw with {LIB_NumericalSchemeFluid, LIB_PhysicsParametersFluid};
  return qw;
}

couple1 coupleModels1 SolidModel1 FluidModel (Tin) {
  coupledSurface = CoupledSurfaces(cylinder_outer1, cylinder_inner1);
  qw = FluidModel(Tin);
  out = StructureModel (qw);
  return out;
}

couple2 coupleModels2 SolidModel2 FluidModel (Tin) {
  coupledSurface = CoupledSurfaces(cylinder_outer2, cylinder_inner2);
  qw = FluidModel(Tin);
  out = StructureModel (qw);
  return out;
}

couple3 coupleModels3 SolidModel3 FluidModel (Tin) {
  coupledSurface = CoupledSurfaces(cylinder_outer3, cylinder_inner3);
  qw = FluidModel(Tin);
  out = StructureModel (qw);
  return out;
}